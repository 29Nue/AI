from flask import Flask,jsonify, render_template, request, redirect, url_for, flash, session,send_from_directory # type: ignore
from deep_translator import GoogleTranslator  # type: ignore
import speech_recognition as sr  # type: ignore
from gtts import gTTS  # type: ignore
from pydub import AudioSegment  # type: ignore
from pydub.utils import which  # type: ignore
import os
import google.generativeai as genai  # type: ignore
import json
import base64
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash # type: ignore
import cv2,  uuid # type: ignore
from docx import Document # type: ignore
from PIL import Image # type: ignore
import io
from datetime import datetime, timedelta


# C√†i ƒë·∫∑t
AudioSegment.converter = which("ffmpeg")
genai.configure(api_key="AIzaSyD5fOve7k8CZMfZNWChXLcuLpHxVsclY0E")  # Gemini API

app = Flask(__name__)
app.secret_key = "emiu-dang-yeu-vo-cuc-2025"



USERS_FILE = "data/users.json"
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=4)


os.makedirs("static/audio", exist_ok=True)
os.makedirs("data", exist_ok=True)


# TRANG CH√çNH
@app.route("/")
def home():
    return render_template("index.html")
#Dang nhap
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"].strip()
        password = request.form["password"]

        # Check admin
        if username == "nhi" and password == "123456":
            session["username"] = "nhi"
            session["role"] = "admin"
            flash("ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi quy·ªÅn Admin!", "success")
            return redirect("/")

        users = load_users()
        if username not in users:
            flash("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!", "danger")
            return render_template("login.html")

        user = users[username]

        if not check_password_hash(user["password"], password):
            flash("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!", "danger")
            return render_template("login.html")

        # Check duy·ªát gi·∫£ng vi√™n
        if user["role"] == "teacher" and not user.get("approved", False):
            flash("T√†i kho·∫£n gi·∫£ng vi√™n c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c duy·ªát!", "warning")
            return render_template("login.html")

        # L∆∞u session
        session["username"] = username
        session["role"] = user["role"]

        flash(f"ƒêƒÉng nh·∫≠p th√†nh c√¥ng! B·∫°n l√† { 'Gi·∫£ng vi√™n' if user['role']=='teacher' else 'H·ªçc sinh' }.", "success")
        return redirect("/")

    return render_template("login.html")

@app.route("/approve_teachers")
def approve_teachers():
    users = load_users()
    teachers = []
    for username, info in users.items():
        if info.get("role") == "teacher":
            teachers.append({
                "username": username,
                "created_at": info.get("created_at", "N/A"),
                "approved": info.get("approved", False)
            })
    return render_template("approve_teachers.html", teachers=teachers)


@app.route("/approve_teacher/<username>")
def approve_teacher(username):
    users = load_users()
    if username in users and users[username].get("role") == "teacher":
        users[username]["approved"] = True
        save_users(users)
        flash(f"‚úÖ ƒê√£ duy·ªát gi·∫£ng vi√™n {username} th√†nh c√¥ng!", "success")
    else:
        flash("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n c·∫ßn duy·ªát!", "danger")
    return redirect(url_for("approve_teachers"))


@app.route("/remove_teacher/<username>")
def remove_teacher(username):
    users = load_users()
    if username in users and users[username].get("role") == "teacher":
        users.pop(username)
        save_users(users)
        flash(f"üóëÔ∏è ƒê√£ x√≥a gi·∫£ng vi√™n {username} th√†nh c√¥ng!", "danger")
    else:
        flash("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n c·∫ßn x√≥a!", "warning")
    return redirect(url_for("approve_teachers"))

@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = request.form["username"].strip().lower()
        password = request.form["password"]

        users = load_users()
        
        # ‚ùå Kh√¥ng cho tr√πng v·ªõi b·∫•t k·ª≥ username n√†o trong JSON
        if username in users:
            flash("T√™n ƒëƒÉng k√Ω ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ch·ªçn t√™n kh√°c.", "danger")
            return render_template("register.html")

        # ‚ùå Kh√¥ng cho tr√πng v·ªõi t√†i kho·∫£n admin m·∫∑c ƒë·ªãnh
        if username == "nhi":
            flash("T√™n n√†y ƒë∆∞·ª£c d√†nh cho admin, h√£y ch·ªçn t√™n kh√°c!", "danger")
            return render_template("register.html")

        # Ph√¢n lo·∫°i vai tr√≤ (n·∫øu form c√≥ ch·ªçn role)
        role = request.form.get("role", "student")

        user_data = {
            "password": generate_password_hash(password),
            "role": role,
            "approved": True if role == "student" else False
        }

        users[username] = user_data
        save_users(users)

        if role == "teacher":
            flash("ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ch·ªù admin duy·ªát t√†i kho·∫£n gi·∫£ng vi√™n.", "info")
        else:
            flash("ƒêƒÉng k√Ω th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p.", "success")

        return redirect(url_for("login"))  # ‚úÖ v·ªÅ trang login

    return render_template("register.html")


@app.route("/logout")
def logout():
    session.clear()  # X√≥a to√†n b·ªô session
    flash("B·∫°n ƒë√£ ƒëƒÉng xu·∫•t!", "info")
    return redirect(url_for("login"))  # Quay v·ªÅ trang login

#===============
# AI D·ªäCH
@app.route("/translate", methods=["GET", "POST"])
def translate():
    translated_text = ""
    original_text = ""
    lang = "en"

    if request.method == "POST":
        original_text = request.form.get("text_input", "")
        lang = request.form.get("lang", "en")

        if original_text.strip():
            model = genai.GenerativeModel("gemini-2.0-flash")

            prompt = f"""
            Nhi·ªám v·ª• c·ªßa b·∫°n l√† D·ªäCH ch√≠nh x√°c ƒëo·∫°n vƒÉn sau sang ng√¥n ng·ªØ "{lang}".
            - N·∫øu c√≥ √Ω c·∫ßn gi·∫£i th√≠ch ho·∫∑c ph√¢n t√≠ch th√™m, h√£y ghi ·ªü D√íNG M·ªöI sau b·∫£n d·ªãch, b·∫Øt ƒë·∫ßu b·∫±ng 'üìò Gi·∫£i th√≠ch:'.
            - Tuy·ªát ƒë·ªëi kh√¥ng tr·ªôn ph·∫ßn gi·∫£i th√≠ch v√†o n·ªôi dung d·ªãch ch√≠nh.
            ƒêo·∫°n c·∫ßn d·ªãch:
            {original_text}
            """
            response = model.generate_content(prompt)
            translated_text = response.text.strip()

    return render_template(
        "translate.html",
        translated=translated_text,
        original_text=original_text,
        lang=lang
    )
    
# AI GHI √ÇM + D·ªäCH + PH√ÅT √ÇM
from datetime import datetime

@app.route("/speech_translate", methods=["POST"])
def speech_translate():
    os.makedirs("static/audio", exist_ok=True)
    r = sr.Recognizer()

    if "voice_input" not in request.files:
        return redirect(url_for("translate"))

    file = request.files["voice_input"]
    input_path = "static/audio/voice_input.webm"
    wav_path = "static/audio/converted.wav"
    file.save(input_path)

    # chuy·ªÉn webm -> wav
    AudioSegment.from_file(input_path).export(wav_path, format="wav")

    try:
        with sr.AudioFile(wav_path) as source:
            audio = r.record(source)
            speech_text = r.recognize_google(audio, language="vi-VN")
    except sr.UnknownValueError:
        return render_template("translate.html",
            speech_text="Kh√¥ng nghe r√µ, vui l√≤ng th·ª≠ l·∫°i",
            speech_translated="", lang="en")
    except sr.RequestError:
        return render_template("translate.html",
            speech_text="L·ªói k·∫øt n·ªëi v·ªõi Google Speech API",
            speech_translated="", lang="en")

    target_lang = request.form.get("target_lang", "en")
    speech_translated = GoogleTranslator(source='auto', target=target_lang).translate(speech_text)

    # üî∏ t·∫°o t√™n file mp3 duy nh·∫•t
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S%f")
    mp3_filename = f"output_{timestamp}.mp3"
    mp3_path = os.path.join("static/audio", mp3_filename)

    # l∆∞u file mp3
    tts = gTTS(speech_translated, lang=target_lang)
    tts.save(mp3_path)

    # truy·ªÅn t√™n file mp3 sang html
    audio_url = f"/{mp3_path}"

    return render_template(
        "translate.html",
        lang=target_lang,
        speech_text=speech_text,
        speech_translated=speech_translated,
        audio_file=audio_url
    )


# AI H·ªåC T·∫¨P
@app.route("/ai_tutor", methods=["GET", "POST"])
def ai_tutor():
    question = ""
    answer = ""

    if request.method == "POST":
        question = request.form.get("question", "")
        if question:
            try:
                model = genai.GenerativeModel("gemini-2.5-flash")
                chat = model.start_chat(history=[])
                response = chat.send_message(f"{question}\n\nH√£y tr·∫£ l·ªùi ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát.")
                answer = response.text

                # G·ªôp nhi·ªÅu d√≤ng tr·ªëng li√™n ti·∫øp th√†nh 1 d√≤ng tr·ªëng
                answer = re.sub(r'\n\s*\n+', '\n', answer.strip())

            except Exception as e:
                answer = f"L·ªói k·∫øt n·ªëi Gemini: {e}"

    return render_template("ai_tutor.html", question=question, answer=answer)
# AI C·∫¢M X√öC
import re

@app.route("/emotion", methods=["GET", "POST"])
def emotion():
    emotion_text = ""
    emotion_response = ""

    if request.method == "POST":
        emotion_text = request.form.get("emotion_text", "")
        if emotion_text:
            try:
                model = genai.GenerativeModel("gemini-2.5-flash")
                response = model.generate_content(
                    f"Ng∆∞·ªùi d√πng vi·∫øt: \"{emotion_text}\".\n\n"
                    "H√£y ph√¢n t√≠ch c·∫£m x√∫c n√†y v√† ƒë∆∞a ra g·ª£i √Ω c·∫£i thi·ªán tinh th·∫ßn. "
                    "Tr·∫£ l·ªùi ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát, tr√¨nh b√†y r√µ r√†ng, chia √Ω theo t·ª´ng ƒëo·∫°n."
                )
                # L·∫•y text
                emotion_response = response.text
                # G·ªôp nhi·ªÅu d√≤ng tr·ªëng li√™n ti·∫øp th√†nh 1
                emotion_response = re.sub(r'\n\s*\n+', '\n', emotion_response.strip())
            except Exception as e:
                emotion_response = f"L·ªói k·∫øt n·ªëi Gemini: {e}"

    return render_template("emotion.html",
                           emotion_text=emotion_text,
                           emotion_response=emotion_response)

# tinh toan vui
@app.route('/calculator_tools')
def calculator_tools():
    return render_template('calculator_tools.html')


DATA_FILE = "data/classrooms.json"

def load_classrooms():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def save_classrooms(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


# Trang ch√≠nh AI H·ªó Tr·ª£ Gi√°o D·ª•c
@app.route("/ai_education", methods=["GET", "POST"])
def ai_education():
    user = session.get("user", "Kh√°ch")
    classrooms = load_classrooms()
    lectures = load_lectures()
    links = load_links()   # ‚Üê load link h·ªçc t·∫≠p t·ª´ JSON
    quizzes = load_quizzes()     
    all_results = load_quiz_results()  # list dict k·∫øt qu·∫£
    username = session.get("username")

    # th√™m flag ƒë·ªÉ template check
    for q in quizzes:
        q["has_done"] = any(r["quiz_id"] == q["id"] and r["user"] == username for r in all_results)


    return render_template("ai_education.html", 
                           user=user, 
                           classrooms=classrooms,
                           lectures=lectures,
                           links=links,  # ‚Üê truy·ªÅn links v√†o template
                            quizzes=quizzes)


    # N·∫øu form Th√™m L·ªõp ƒë∆∞·ª£c submit
    if request.method == "POST":
        class_name = request.form.get("class_name")
        teacher = request.form.get("teacher")
        time = request.form.get("time")
        description = request.form.get("description")

        # T·∫°o ID m·ªõi
        new_id = max([c["id"] for c in classrooms], default=100) + 1

        # Th√™m l·ªõp m·ªõi v·ªõi tr·∫°ng th√°i m·∫∑c ƒë·ªãnh l√† pending
        new_class = {
            "id": new_id,
            "name": class_name,
            "teacher": teacher,
            "time": time,
            "description": description,
            "subject": "general",  
            "link": f"https://meet.jit.si/class{new_id}",
            "status": "pending"   # m·∫∑c ƒë·ªãnh ch∆∞a ho√†n th√†nh
        }

        classrooms.append(new_class)
        save_classrooms(classrooms)  # L∆∞u l·∫°i JSON

        return redirect(url_for("ai_education"))

    return render_template(
        "ai_education.html",
        user=user,
        classrooms=classrooms
    )


# V√†o ph√≤ng h·ªçc tr·ª±c ti·∫øp tr√™n Jitsi
@app.route("/class/<int:class_id>")
def class_room(class_id):
    classrooms = load_classrooms()
    cls = next((c for c in classrooms if c["id"] == class_id), None)

    if not cls:
        return "Kh√¥ng t√¨m th·∫•y l·ªõp", 404

    if cls.get("status") == "done":
        return "<h2>L·ªõp h·ªçc ƒë√£ k·∫øt th√∫c ‚úÖ</h2>"

    # Redirect sang link Jitsi (vd: https://meet.jit.si/class101)
    return redirect(cls["link"])


# ƒê√°nh d·∫•u l·ªõp ho√†n th√†nh
@app.route("/class/<int:class_id>/complete", methods=["POST"])
def complete_class(class_id):
    classrooms = load_classrooms()
    for c in classrooms:
        if c["id"] == class_id:
            c["status"] = "done"  # ƒë·ªïi tr·∫°ng th√°i
            break
    save_classrooms(classrooms)
    return redirect(url_for("ai_education"))
# X√≥a l·ªõp h·ªçc
@app.route("/class/<int:class_id>/delete", methods=["POST"])
def delete_class(class_id):
    classrooms = load_classrooms()
    classrooms = [c for c in classrooms if c["id"] != class_id]
    save_classrooms(classrooms)
    return redirect(url_for("ai_education"))

#baigiang
import uuid
LECTURE_FILE = "data/lectures.json"
UPLOAD_FOLDER = "uploads/lectures"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
def load_lectures():
    try:
        with open(LECTURE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []


def save_lectures(data):
    with open(LECTURE_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)
        
@app.route("/lecture/view/<filename>")
def view_lecture(filename):
    return send_from_directory(UPLOAD_FOLDER, filename, as_attachment=False)

@app.route("/lecture/upload", methods=["POST"])
def upload_lecture():
    if "username" not in session:
        return redirect(url_for("login"))

    title = request.form["title"]
    file = request.files["file"]

    if file:
        # t·∫°o t√™n file duy nh·∫•t
        filename = f"{uuid.uuid4()}_{file.filename}" # type: ignore
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        file.save(filepath)

        lectures = load_lectures()
        lectures.append({
        "id": str(uuid.uuid4()),
        "title": title,
        "filename": filename,
        "uploader": session.get("username"),
        "uploaded_at": datetime.now().strftime("%Y-%m-%d %H:%M")  # ng√†y gi·ªù upload
    })

        save_lectures(lectures)

    return redirect(url_for("ai_education"))


@app.route("/lecture/download/<filename>")
def download_lecture(filename):
    return send_from_directory(UPLOAD_FOLDER, filename, as_attachment=True) # type: ignore

# S·ª≠a b√†i gi·∫£ng
@app.route("/lecture/edit/<lecture_id>", methods=["GET", "POST"])
def edit_lecture(lecture_id):
    if "username" not in session or session.get("role") != "teacher":
        flash("‚ö†Ô∏è Ch·ªâ gi·∫£ng vi√™n m·ªõi ƒë∆∞·ª£c s·ª≠a b√†i gi·∫£ng", "danger")
        return redirect(url_for("ai_education"))

    lectures = load_lectures()
    lecture = next((l for l in lectures if l["id"] == lecture_id), None)
    if not lecture:
        flash("‚ùå B√†i gi·∫£ng kh√¥ng t·ªìn t·∫°i", "danger")
        return redirect(url_for("ai_education"))

    if request.method == "POST":
        lecture["title"] = request.form.get("title", lecture["title"])
        save_lectures(lectures)
        flash("‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t b√†i gi·∫£ng!", "success")
        return redirect(url_for("ai_education"))

    return render_template("edit_lecture.html", lecture=lecture)


# X√≥a b√†i gi·∫£ng
@app.route("/lecture/delete/<lecture_id>", methods=["POST"])
def delete_lecture(lecture_id):
    if "username" not in session or session.get("role") != "teacher":
        flash("‚ö†Ô∏è Ch·ªâ gi·∫£ng vi√™n m·ªõi ƒë∆∞·ª£c x√≥a b√†i gi·∫£ng", "danger")
        return redirect(url_for("ai_education"))

    lectures = load_lectures()
    lectures = [l for l in lectures if l["id"] != lecture_id]
    save_lectures(lectures)
    flash("üóëÔ∏è ƒê√£ x√≥a b√†i gi·∫£ng!", "info")
    return redirect(url_for("ai_education"))

#Link hoc tap
LINKS_FILE = "data/links.json"

def load_links():
    try:
        with open(LINKS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def save_links(data):
    with open(LINKS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@app.route("/links/add", methods=["POST"])
def add_link():
    if "username" not in session:
        return redirect(url_for("login"))

    title = request.form["title"]
    description = request.form.get("description", "")
    url = request.form["url"]

    links = load_links()
    links.append({
        "id": str(uuid.uuid4()),
        "title": title,
        "description": description,
        "url": url,
        "added_by": session.get("username")
    })
    save_links(links)
    flash("‚úÖ Th√™m link h·ªçc t·∫≠p th√†nh c√¥ng!", "success")
    return redirect(url_for("ai_education"))

@app.route("/links/delete/<link_id>", methods=["POST"])
def delete_link(link_id):
    if "username" not in session:
        return redirect(url_for("login"))

    links = load_links()
    links = [l for l in links if l["id"] != link_id]
    save_links(links)
    flash("üóëÔ∏è ƒê√£ x√≥a link.", "info")
    return redirect(url_for("ai_education"))

REGISTER_FILE = "data/registers.json"

def load_registers():
    if os.path.exists(REGISTER_FILE):
        with open(REGISTER_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_registers(data):
    with open(REGISTER_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@app.route("/class/<class_id>/register", methods=["GET", "POST"])
def register_class(class_id):
    if "username" not in session:
        return redirect(url_for("login"))

    if request.method == "POST":
        student_name = request.form.get("student_name")
        img_data = request.form.get("captured_image")

        if not student_name or not img_data:
            flash("‚ùå Vui l√≤ng nh·∫≠p t√™n v√† ch·ª•p ·∫£nh khu√¥n m·∫∑t.", "danger")
            return redirect(url_for("register_class", class_id=class_id))

        # Gi·∫£i m√£ ·∫£nh base64
        img_data = img_data.split(",")[1]  # b·ªè ph·∫ßn 'data:image/png;base64,...'
        img_bytes = base64.b64decode(img_data)

        face_dir = os.path.join("static", "faces")
        os.makedirs(face_dir, exist_ok=True)
        filename = f"{student_name}_{uuid.uuid4().hex}.png"
        filepath = os.path.join(face_dir, filename)

        with open(filepath, "wb") as f:
            f.write(img_bytes)

        # L∆∞u th√¥ng tin ƒëƒÉng k√Ω
        registers = load_registers()
        registers.append({
            "student": student_name,
            "class_id": class_id,
            "class_name": f"L·ªõp {class_id}",
            "face_image": f"faces/{filename}"
        })
        save_registers(registers)

        flash("üéâ ƒêƒÉng k√Ω h·ªçc th√†nh c√¥ng!", "success")
        return redirect(url_for("view_registers"))

    return render_template("register_face.html", class_id=class_id)

@app.route("/class/registers")
def view_registers():
    if "username" not in session:
        return redirect(url_for("login"))

    if session.get("role") not in ["admin", "teacher"]:
        flash("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch ƒëƒÉng k√Ω.", "danger")
        return redirect(url_for("ai_education"))

    registers = load_registers()
    return render_template("register_list.html", registers=registers)

# KIEM TRA
QUIZ_FILE = "data/quizzes.json"

# ========== UTILS ==========
def load_quizzes():
    if os.path.exists(QUIZ_FILE):
        with open(QUIZ_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_quizzes(quizzes):
    os.makedirs("data", exist_ok=True)
    with open(QUIZ_FILE, "w", encoding="utf-8") as f:
        json.dump(quizzes, f, ensure_ascii=False, indent=2)

def extract_text_from_docx(filepath):
    doc = Document(filepath)
    paragraphs = [p.text.strip() for p in doc.paragraphs if p.text.strip()]
    return "\n".join(paragraphs)

def count_questions_in_text(text):
    import re
    matches = re.findall(r"C√¢u\s*\d+[:.]", text, flags=re.IGNORECASE)
    return len(matches) if matches else None

# ========== AI GENERATE ==========
def ai_generate_questions(text, num_questions=None):
    prompt = f"""
B·∫°n l√† m·ªôt tr·ª£ l√Ω gi√°o d·ª•c. 
T·ª´ ƒëo·∫°n vƒÉn b·∫£n sau, h√£y t·∫°o {num_questions} c√¢u h·ªèi tr·∫Øc nghi·ªám, 
m·ªói c√¢u c√≥ 4 ph∆∞∆°ng √°n (A, B, C, D) v√† m·ªôt ƒë√°p √°n ƒë√∫ng.

Tr·∫£ v·ªÅ JSON array, m·ªói ph·∫ßn t·ª≠:
{{
  "question": "...?",
  "options": {{"A": "...", "B": "...", "C": "...", "D": "..."}},
  "answer": "A"
}}

ƒêo·∫°n vƒÉn b·∫£n:
\"\"\" 
{text}
\"\"\"
    """
    model = genai.GenerativeModel("gemini-2.5-flash")
    response = model.generate_content(prompt)
    content = response.text.strip()

    # --- x·ª≠ l√Ω JSON ---
    import re, json
    try:
        # L·∫•y ph·∫ßn JSON thu·∫ßn t·ª´ text
        match = re.search(r"\[.*\]", content, re.DOTALL)
        if match:
            content = match.group(0)
        questions = json.loads(content)

        clean = []
        for q in questions:
            if "question" in q and "options" in q and "answer" in q:
                clean.append(q)
        return clean
    except Exception as e:
        print("‚ö†Ô∏è L·ªói parse JSON:", e, "\nContent:\n", content)
        return []

# ========== ROUTES ==========

@app.route("/quiz/auto", methods=["POST"])
def create_auto_quiz():
    quizzes = load_quizzes()

    title = request.form["title"]
    duration = int(request.form["duration"])
    file = request.files["file"]

    if not file:
        return "Ch∆∞a upload file Word", 400

    filepath = os.path.join("uploads", file.filename)
    os.makedirs("uploads", exist_ok=True)
    file.save(filepath)

    # Tr√≠ch text v√† g·ªçi AI
    text = extract_text_from_docx(filepath)
    questions = ai_generate_questions(text)
    if not questions:
        flash("‚ùå AI kh√¥ng t·∫°o ƒë∆∞·ª£c c√¢u h·ªèi, ki·ªÉm tra l·∫°i file Word!", "danger")
        return redirect(url_for("ai_education"))


    new_quiz = {
        "id": len(quizzes) + 1,
        "title": title,
        "duration": duration,
        "num_questions": len(questions),
        "questions": questions,
        "creator": session.get("username", "Gi√°o vi√™n"),
        "created_at": datetime.now().strftime("%d-%m-%Y %H:%M"),
        "type": "Tr·∫Øc nghi·ªám AI"
    }


    quizzes.append(new_quiz)
    save_quizzes(quizzes)

    return redirect(url_for("ai_education"))


@app.route("/quiz/essay", methods=["POST"])
def create_essay_quiz():
    quizzes = load_quizzes()

    title = request.form["title"]
    duration = int(request.form["duration"])
    content = request.form["content"]

    new_quiz = {
        "id": len(quizzes) + 1,
        "title": title,
        "duration": duration,
        "num_questions": 1,
        "questions": [
            {
                "question": content,
                "options": {},
                "answer": None
            }
        ],
        "creator": session.get("username", "Gi√°o vi√™n"),
        "created_at": datetime.now().strftime("%d-%m-%Y %H:%M"),
        "type": "T·ª± lu·∫≠n"
    }

    quizzes.append(new_quiz)
    save_quizzes(quizzes)

    return redirect(url_for("ai_education"))

# Khi v√†o trang l√†m quiz
@app.route("/quiz/<int:quiz_id>")
def start_quiz(quiz_id):
    quizzes = load_quizzes()
    quiz = next((q for q in quizzes if q["id"] == quiz_id), None)
    if not quiz:
        flash("‚ùå Kh√¥ng t√¨m th·∫•y b√†i ki·ªÉm tra.", "danger")
        return redirect(url_for("ai_education"))
    if quiz.get("locked"):
        flash("‚ö†Ô∏è B√†i ki·ªÉm tra n√†y ƒë√£ b·ªã kh√≥a. B·∫°n kh√¥ng th·ªÉ l√†m b√†i.", "warning")
        return redirect(url_for("ai_education"))
    username = session.get("username")
    all_results = load_quiz_results()

    # ‚úÖ R√†ng bu·ªôc: n·∫øu user ƒë√£ l√†m quiz n√†y ‚Üí redirect sang danh s√°ch k·∫øt qu·∫£
    if any(r["quiz_id"] == quiz_id and r["user"] == username for r in all_results):
        flash("‚ö†Ô∏è B·∫°n ch·ªâ ƒë∆∞·ª£c l√†m b√†i ki·ªÉm tra n√†y 1 l·∫ßn.", "warning")
        return redirect(url_for("quiz_results_list", quiz_id=quiz_id))

    # L∆∞u th·ªùi gian b·∫Øt ƒë·∫ßu v√†o session
    session['start_time'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    return render_template("quiz_start.html", quiz=quiz)


RESULTS_FILE = "data/quiz_results.json"

@app.route("/quiz/<int:quiz_id>/submit", methods=["POST"])
def submit_quiz(quiz_id):
    username = session.get("username", "Unknown")
    quizzes = load_quizzes()  # load quiz t·ª´ JSON ho·∫∑c ngu·ªìn kh√°c
    quiz = next((q for q in quizzes if q["id"] == quiz_id), None)
    if not quiz:
        flash("‚ùå Kh√¥ng t√¨m th·∫•y b√†i ki·ªÉm tra.", "danger")
        return redirect(url_for("ai_education"))

    # ===== T√≠nh th·ªùi gian l√†m b√†i =====
    start_time = session.get("start_time")
    end_time = datetime.now()
    time_used = 0
    if start_time:
        start_time = datetime.strptime(start_time, "%Y-%m-%d %H:%M:%S")
        time_used = (end_time - start_time).seconds // 60

    # ===== Ch·∫•m ƒëi·ªÉm =====
    user_answers = {}
    score = 0
    questions = quiz["questions"]
    for idx, q in enumerate(questions):
        ans = request.form.get(f"q{idx}")
        user_answers[idx] = ans
        if quiz.get("type") == "Tr·∫Øc nghi·ªám AI" and ans == q.get("answer"):
            score += 1

    # ===== T·∫°o dict k·∫øt qu·∫£ =====
    result = {
        "quiz_id": quiz_id,
        "user": username,
        "title": quiz.get("title"),
        "total": len(questions),
        "score": score if quiz.get("type") == "Tr·∫Øc nghi·ªám AI" else None,
        "answers": user_answers,
        "time_used": time_used,
        "submitted_at": end_time.strftime("%Y-%m-%d %H:%M:%S")
    }

    # ===== L∆∞u v√†o JSON =====
    save_quiz_result(result)

    return render_template("quiz_result.html", result=result, quiz=quiz)

# ===== H√†m load JSON =====
def load_quiz_results():
    try:
        with open(RESULTS_FILE, "r", encoding="utf-8") as f:
            results = json.load(f)
            if isinstance(results, list):
                return results
            return []
    except FileNotFoundError:
        return []

# ===== H√†m save JSON =====
def save_quiz_result(result):
    results = load_quiz_results()
    # ch·ªâ l∆∞u n·∫øu user ch∆∞a l√†m quiz n√†y
    if not any(r["quiz_id"] == result["quiz_id"] and r["user"] == result["user"] for r in results):
        results.append(result)
        with open(RESULTS_FILE, "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2)


@app.route("/quiz/<int:quiz_id>/results")
def quiz_results_list(quiz_id):
    quizzes = load_quizzes()
    quiz = next((q for q in quizzes if q["id"] == quiz_id), None)
    if not quiz:
        flash("‚ùå Kh√¥ng t√¨m th·∫•y b√†i ki·ªÉm tra.", "danger")
        return redirect(url_for("ai_education"))

    # ƒë·ªçc t·∫•t c·∫£ k·∫øt qu·∫£ t·ª´ file JSON
    all_results = load_quiz_results()  # tr·∫£ v·ªÅ list
    # l·ªçc theo quiz_id
    results = [r for r in all_results if r["quiz_id"] == quiz_id]

    return render_template("quiz_results_list.html", quiz=quiz, results=results)

@app.route("/quiz/<int:quiz_id>/lock", methods=["POST"])
def lock_quiz(quiz_id):
    quizzes = load_quizzes()
    quiz = next((q for q in quizzes if q["id"] == quiz_id), None)
    if not quiz:
        flash("‚ùå Kh√¥ng t√¨m th·∫•y b√†i ki·ªÉm tra.", "danger")
        return redirect(url_for("ai_education"))

    # Ch·ªâ cho teacher ho·∫∑c admin kh√≥a
    if session.get("role") not in ["teacher", "admin"]:
        flash("‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.", "warning")
        return redirect(url_for("ai_education"))

    quiz["locked"] = True
    save_quizzes(quizzes)  # H√†m ghi l·∫°i JSON

    flash(f"üîí B√†i ki·ªÉm tra '{quiz['title']}' ƒë√£ b·ªã kh√≥a.", "success")
    return redirect(url_for("ai_education"))

# ===== H√†m save to√†n b·ªô results =====
def save_quiz_results(results):
    with open(RESULTS_FILE, "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)


@app.route("/quiz/<int:quiz_id>/delete", methods=["POST"])
def delete_quiz(quiz_id):
    quizzes = load_quizzes()
    quiz = next((q for q in quizzes if q.get("id") == quiz_id), None)

    if not quiz:
        flash("‚ùå Kh√¥ng t√¨m th·∫•y b√†i ki·ªÉm tra.", "danger")
        return redirect(url_for("ai_education"))

    # R√†ng bu·ªôc quy·ªÅn xo√°
    if not (
        session.get("role") == "admin"
        or (session.get("role") == "teacher" and session.get("username") == quiz.get("creator"))
    ):
        flash("‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn xo√° b√†i ki·ªÉm tra n√†y.", "warning")
        return redirect(url_for("ai_education"))

    # Th·ª±c hi·ªán xo√°
    quizzes = [q for q in quizzes if q.get("id") != quiz_id]
    save_quizzes(quizzes)

    # Xo√° lu√¥n k·∫øt qu·∫£ li√™n quan
    results = load_quiz_results()
    results = [r for r in results if r.get("quiz_id") != quiz_id]
    save_quiz_results(results)

    flash("‚úÖ ƒê√£ xo√° b√†i ki·ªÉm tra v√† to√†n b·ªô k·∫øt qu·∫£ li√™n quan.", "success")
    return redirect(url_for("ai_education"))

#THONG TIN CA NHAN
PROFILE_FILE = "data/profile.json"

def load_profiles():
    if not os.path.exists(PROFILE_FILE):
        return {}
    try:
        with open(PROFILE_FILE, "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:  # file r·ªóng
                return {}
            return json.loads(content)
    except json.JSONDecodeError:
        return {}


def save_profiles(profiles):
    with open(PROFILE_FILE, "w", encoding="utf-8") as f:
        json.dump(profiles, f, ensure_ascii=False, indent=2)

@app.route("/profile", methods=["GET", "POST"])
def profile():
    if "username" not in session:
        flash("‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi ch·ªânh s·ª≠a th√¥ng tin.", "warning")
        return redirect(url_for("login"))

    username = session["username"]
    profiles = load_profiles()

    # N·∫øu ch∆∞a c√≥ profile cho user ‚Üí t·∫°o tr·ªëng
    user_profile = profiles.get(username, {
        "name": "",
        "student_id": "",
        "birthdate": "",
        "gender": "",
        "hometown": ""
    })

    if request.method == "POST":
        # L·∫•y d·ªØ li·ªáu t·ª´ form
        user_profile = {
            "name": request.form.get("name", "").strip(),
            "student_id": request.form.get("student_id", "").strip(),
            "birthdate": request.form.get("birthdate", "").strip(),
            "gender": request.form.get("gender", "").strip(),
            "hometown": request.form.get("hometown", "").strip()
        }

        # C·∫≠p nh·∫≠t v√†o dict profiles theo username
        profiles[username] = user_profile
        save_profiles(profiles)

        flash("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!", "success")
        return redirect(url_for("profile"))
        

    # Truy·ªÅn d·ªØ li·ªáu ra giao di·ªán
    return render_template("profile.html", user=user_profile, username=username)

@app.route("/profile/<username>/<int:quiz_id>")
def view_profile(username, quiz_id):
    profiles = load_profiles()
    user = profiles.get(username)

    if not user:
        flash("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.", "danger")
        return redirect(url_for("ai_education"))

    return render_template("profile_view.html", user=user, username=username, quiz_id=quiz_id)

# Route ƒë·∫øn trang AI T·∫°o L·ªãch Tr√¨nh
@app.route('/ai_schedule')
def ai_schedule_page():
    if "username" not in session:
        return redirect(url_for("login"))
    
    # N·∫øu login r·ªìi th√¨ render trang t·∫°o l·ªãch tr√¨nh
    return render_template("ai_schedule.html")

SCHEDULE_FILE = "data/scheduleNew.json"

def load_schedules():
    if os.path.exists(SCHEDULE_FILE):
        with open(SCHEDULE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_schedules(data):
    with open(SCHEDULE_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# Route tr·∫£ v·ªÅ to√†n b·ªô l·ªãch tr√¨nh
@app.route('/get_all_schedules')
def get_all_schedules():
    username = request.args.get('username') or session.get('username')
    schedules = load_schedules()
    if username:
        # ch·ªâ tr·∫£ l·ªãch c·ªßa user ƒë√≥
        schedules = [s for s in schedules if s.get('username') == username]
    return jsonify(schedules)

# Route ƒë√°nh d·∫•u ho√†n th√†nh
@app.route('/mark_complete/<int:schedule_id>', methods=['POST'])
def mark_complete(schedule_id):
    # username c√≥ th·ªÉ g·ª≠i trong body JSON ho·∫∑c l·∫•y t·ª´ session
    body = {}
    try:
        body = request.get_json(force=False) or {}
    except Exception:
        body = {}
    username = body.get('username') or request.form.get('username') or session.get('username')

    schedules = load_schedules()
    updated = False
    for s in schedules:
        if s.get("id") == schedule_id:
            # ki·ªÉm tra ownership (n·∫øu schedule g·∫Øn username)
            owner = s.get("username")
            if owner and username and owner != username:
                return jsonify({"error": "Kh√¥ng c√≥ quy·ªÅn s·ª≠a l·ªãch n√†y"}), 403
            s["status"] = "ho√†n th√†nh"
            updated = True
            break

    if updated:
        save_schedules(schedules)
        return jsonify({"success": True})
    else:
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y l·ªãch"}), 404

# X√≥a l·ªãch: ch·ªâ x√≥a khi c√πng username (ho·∫∑c admin n·∫øu ko truy·ªÅn username)
@app.route('/delete_schedule/<int:schedule_id>', methods=['POST'])
def delete_schedule(schedule_id):
    try:
        body = request.get_json(force=False) or {}
    except Exception:
        body = {}
    username = body.get('username') or request.form.get('username') or session.get('username')

    schedules = load_schedules()
    target = None
    for s in schedules:
        if s.get("id") == schedule_id:
            target = s
            break

    if not target:
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y l·ªãch"}), 404

    owner = target.get("username")
    if owner and username and owner != username:
        return jsonify({"error": "Kh√¥ng c√≥ quy·ªÅn x√≥a l·ªãch n√†y"}), 403

    # x√≥a th·∫≠t
    schedules = [s for s in schedules if s.get("id") != schedule_id]
    save_schedules(schedules)
    return jsonify({"success": True})

# Route x·ª≠ l√Ω ·∫£nh v√† append v√†o JSON
@app.route('/process_image', methods=['POST'])
def process_image_route():
    if 'file' not in request.files:
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y file ·∫£nh"}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "File kh√¥ng h·ª£p l·ªá"}), 400

    # username c√≥ th·ªÉ ƒë∆∞·ª£c g·ª≠i k√®m trong form ho·∫∑c l·∫•y t·ª´ session
    username = request.form.get('username') or session.get('username')

    schedule_data = ai_generate_schedule(file)
    if schedule_data:
        schedules = load_schedules()
        max_id = max([s.get("id", 0) for s in schedules], default=0)
        for item in schedule_data.get("schedule", []):
            max_id += 1
            item["id"] = max_id
            item["status"] = "ch∆∞a"
            # g√°n username n·∫øu c√≥ (n·∫øu ko c√≥, ƒë·ªÉ None ho·∫∑c 'public')
            if username:
                item["username"] = username
            else:
                item["username"] = "public"
            # n·∫øu item ch∆∞a c√≥ date, map theo start_date (ƒë√£ c√≥ h√†m get_date_for_weekday)
            if "date" not in item or not item["date"] or item["date"] == "N/A":
                item["date"] = get_date_for_weekday(schedule_data.get("start_date", "N/A"), item.get("day", ""))
            # n·∫øu group r·ªóng th√¨ xo√° key cho g·ªçn
            if "group" in item and (item["group"] is None or str(item["group"]).strip() == ""):
                item.pop("group", None)

        schedules.extend(schedule_data.get("schedule", []))
        save_schedules(schedules)
        return jsonify(schedule_data)
    else:
        return jsonify({"error": "Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i"}), 500


# H√†m x·ª≠ l√Ω logic ch√≠nh: g·ª≠i ·∫£nh ƒë·∫øn Gemini v√† y√™u c·∫ßu tr√≠ch xu·∫•t th√¥ng tin
def ai_generate_schedule(image_file):
    """
    G·ª≠i ·∫£nh th·ªùi kh√≥a bi·ªÉu ƒë·∫øn Gemini 1.5-flash ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin.
    """
    try:
        img = Image.open(io.BytesIO(image_file.read()))
        
        prompt = """
        Ph√¢n t√≠ch h√¨nh ·∫£nh th·ªùi kh√≥a bi·ªÉu n√†y. Tr√≠ch xu·∫•t c√°c th√¥ng tin sau:
            1. B·∫Øt ƒë·∫ßu t·ª´ ng√†y v√† t·ª´ ng√†y.
            2. T√™n c√°c m√¥n h·ªçc.
            3. Th·ª© (Th·ª© Hai, Th·ª© Ba, ...).
            4. Ti·∫øt h·ªçc (v√≠ d·ª•: 678, 12345).
            5. Nh√≥m h·ªçc (n·∫øu c√≥, n·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ chu·ªói r·ªóng "")
            6. Ph√≤ng h·ªçc.
            D·ª±a v√†o b·∫£ng quy ∆∞·ªõc sau, h√£y t√≠nh th·ªùi gian t∆∞∆°ng ·ª©ng cho m·ªói m√¥n:
            - Ti·∫øt 1: 7:30-8:20
            - Ti·∫øt 2: 8:20-9:10
            - Ti·∫øt 3: 9:10-10:00
            - Ti·∫øt 4: 10:10-11:00
            - Ti·∫øt 5: 11:00-11:50
            - Ti·∫øt 6: 13:00-13:50
            - Ti·∫øt 7: 13:50-14:40
            - Ti·∫øt 8: 14:40-15:30
            - Ti·∫øt 9: 15:40-16:30
            - Ti·∫øt 10: 16:30-17:20

            - Quy t·∫Øc: V·ªõi m·ªôt chu·ªói ti·∫øt h·ªçc, h√£y ch·ªâ l·∫•y gi·ªù b·∫Øt ƒë·∫ßu c·ªßa ti·∫øt ƒë·∫ßu ti√™n v√† gi·ªù k·∫øt th√∫c c·ªßa ti·∫øt cu·ªëi c√πng.
            - L∆∞u √Ω ƒë·∫∑c bi·ªát: Ti·∫øt 10 ƒë∆∞·ª£c k√Ω hi·ªáu l√† s·ªë 0 ho·∫∑c 10. Khi b·∫°n th·∫•y m·ªôt s·ªë 0 ƒë·ª©ng sau m·ªôt s·ªë t·ª´ 1 ƒë·∫øn 9, h√£y hi·ªÉu n√≥ l√† ti·∫øt 10. V√≠ d·ª•, "90" l√† Ti·∫øt 9 v√† Ti·∫øt 10.

            - V√≠ d·ª•:
                - Ti·∫øt 123: L·∫•y gi·ªù b·∫Øt ƒë·∫ßu c·ªßa Ti·∫øt 1 (7:30) v√† gi·ªù k·∫øt th√∫c c·ªßa Ti·∫øt 3 (10:00). K·∫øt qu·∫£: "7:30-10:00".
                - Ti·∫øt 45: L·∫•y gi·ªù b·∫Øt ƒë·∫ßu c·ªßa Ti·∫øt 4(10h10) v√† gi·ªù k·∫øt th√∫c c·ªßa Ti·∫øt 5 (11h50). K·∫øt qu·∫£: "10:10-11:50".
                - Ti·∫øt 12345: 7:30-11:50.
                - Ti·∫øt 678: L·∫•y gi·ªù b·∫Øt ƒë·∫ßu c·ªßa Ti·∫øt 6 (13:00) v√† gi·ªù k·∫øt th√∫c c·ªßa Ti·∫øt 8 (15:30). K·∫øt qu·∫£: "13:00-15:30".
                - Ti·∫øt 90: L·∫•y gi·ªù b·∫Øt ƒë·∫ßu c·ªßa Ti·∫øt 9 (15:40) v√† gi·ªù k·∫øt th√∫c c·ªßa Ti·∫øt 10 (17:20). K·∫øt qu·∫£: "15:40-17:20".
                - Ti·∫øt 67890: L·∫•y gi·ªù b·∫Øt ƒë·∫ßu c·ªßa Ti·∫øt 6 (13:00) v√† gi·ªù k·∫øt th√∫c c·ªßa Ti·∫øt 10 (17:20). K·∫øt qu·∫£: "13:00-17:20".

            Xu·∫•t k·∫øt qu·∫£ d∆∞·ªõi ƒë·ªãnh d·∫°ng JSON, v·ªõi c·∫•u tr√∫c sau:
            {
            "start_date": "Ng√†y b·∫Øt ƒë·∫ßu h·ªçc",
            "week_info": "Tu·∫ßn h·ªçc v√† ng√†y b·∫Øt ƒë·∫ßu-k·∫øt th√∫c",
            "schedule": [
                {
                "subject": "T√™n m√¥n h·ªçc",
                "day": "Th·ª©",
                "sessions": "Ti·∫øt h·ªçc",
                "group": "Nh√≥m h·ªçc ho·∫∑c chu·ªói r·ªóng n·∫øu kh√¥ng c√≥",
                "room": "Ph√≤ng h·ªçc",
                "time": "Th·ªùi gian"
                }
            ]
            }
        """
        model = genai.GenerativeModel("gemini-2.5-flash")
        response = model.generate_content([prompt, img])
        content = response.text.strip()
        
        # Th√™m logic ƒë·ªÉ x·ª≠ l√Ω JSON tr·∫£ v·ªÅ
        # T√¨m ph·∫ßn t·ª≠ JSON trong chu·ªói tr·∫£ v·ªÅ (n·∫øu c√≥)
        match = re.search(r"\{.*\}", content, re.DOTALL)
        if match:
            json_string = match.group(0)
            try:
                schedule_data = json.loads(json_string)

                # ‚úÖ th√™m date cho t·ª´ng l·ªãch
                for item in schedule_data.get("schedule", []):
                    item["date"] = get_date_for_weekday(
                        schedule_data.get("start_date", "N/A"),
                        item.get("day", "")
                    )

                # Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng JSON ƒë√£ parse v√† b·ªï sung date
                return schedule_data

            except json.JSONDecodeError as e:
                print(f"L·ªói JSONDecodeError: {e}")
                print(f"Chu·ªói JSON b·ªã l·ªói: {json_string}")
                return None


    except Exception as e:
        print(f"L·ªói x·ª≠ l√Ω ·∫£nh: {e}")
        return None
    
    
def get_date_for_weekday(start_date_str, weekday_name):
    """
    Tr·∫£ v·ªÅ ng√†y (dd/mm/yyyy) ·ª©ng v·ªõi weekday_name d·ª±a v√†o start_date.
    H·ªó tr·ª£ c·∫£ d·∫°ng 'Th·ª© Hai', 'Th·ª© 2', '2', 'T2', ...
    """
    from datetime import datetime, timedelta
    
    # Map chu·∫©n (Mon=0, Sun=6)
    weekday_map = {
        "th·ª© hai": 0, "th·ª© 2": 0, "2": 0, "t2": 0,
        "th·ª© ba": 1, "th·ª© 3": 1, "3": 1, "t3": 1,
        "th·ª© t∆∞": 2, "th·ª© 4": 2, "4": 2, "t4": 2,
        "th·ª© nƒÉm": 3, "th·ª© 5": 3, "5": 3, "t5": 3,
        "th·ª© s√°u": 4, "th·ª© 6": 4, "6": 4, "t6": 4,
        "th·ª© b·∫£y": 5, "th·ª© 7": 5, "7": 5, "t7": 5,
        "ch·ªß nh·∫≠t": 6, "cn": 6, "8": 6
    }

    # Chu·∫©n h√≥a weekday_name v·ªÅ ch·ªØ th∆∞·ªùng
    wk = str(weekday_name).strip().lower()
    target_index = weekday_map.get(wk, None)
    if target_index is None:
        return "N/A"

    # Chu·∫©n h√≥a start_date
    try:
        if "-" in start_date_str:
            start_date = datetime.strptime(start_date_str, "%Y-%m-%d")
        else:
            start_date = datetime.strptime(start_date_str, "%d/%m/%Y")
    except Exception:
        return "N/A"

    # Gi·∫£ ƒë·ªãnh start_date l√† Th·ª© Hai ƒë·∫ßu tu·∫ßn
    delta_days = target_index - 0
    target_date = start_date + timedelta(days=delta_days)
    return target_date.strftime("%d/%m/%Y")

@app.route('/get_sorted_schedules')
def get_sorted_schedules():
    username = request.args.get('username') or session.get('username')
    schedules = load_schedules()
    if username:
        schedules = [s for s in schedules if s.get('username') == username]

    from datetime import datetime

    def parse_date_safe(d):
        if not d or d == "N/A":
            return datetime.max
        try:
            if "-" in d:
                return datetime.strptime(d.strip(), "%Y-%m-%d")
            return datetime.strptime(d.strip(), "%d/%m/%Y")
        except:
            return datetime.max

    def parse_time_safe(t):
        if not t or t == "N/A":
            return datetime.min
        try:
            start = str(t).split("-")[0].strip()
            # th√™m 0 n·∫øu ch·ªâ c√≥ 1 ch·ªØ s·ªë gi·ªù
            if re.match(r"^\d:\d{2}$", start):
                start = "0" + start
            return datetime.strptime(start, "%H:%M")
        except:
            return datetime.min

    def status_order_safe(status):
        order = {"ch∆∞a": 0, "tr·ªÖ": 1, "ho√†n th√†nh": 2, "ho√†n th√†nh tr·ªÖ": 3}
        if not status:
            return 0
        return order.get(status.strip().lower(), 99)

    schedules.sort(
        key=lambda s: (
            status_order_safe(s.get("status")),
            parse_date_safe(s.get("date")),
            parse_time_safe(s.get("time"))
        )
    )

    return jsonify(schedules)

#Thi
EXAM_FILE = "data/exams.json"

# ---- Load & Save Exams ----
def load_exams():
    if os.path.exists(EXAM_FILE):
        with open(EXAM_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_exams(data):
    with open(EXAM_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# ---- Route tr·∫£ v·ªÅ to√†n b·ªô l·ªãch thi ----
@app.route('/get_all_exams')
def get_all_exams():
    username = request.args.get('username') or session.get('username')
    exams = load_exams()
    if username:
        exams = [e for e in exams if e.get('username') == username]
    return jsonify(exams)

# ---- Route xo√° l·ªãch thi ----
@app.route('/delete_exam/<int:exam_id>', methods=['POST'])
def delete_exam(exam_id):
    try:
        body = request.get_json(force=False) or {}
    except Exception:
        body = {}
    username = body.get('username') or request.form.get('username') or session.get('username')

    exams = load_exams()
    target = None
    for e in exams:
        if e.get("id") == exam_id:
            target = e
            break

    if not target:
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y l·ªãch thi"}), 404

    owner = target.get("username")
    if owner and username and owner != username:
        return jsonify({"error": "Kh√¥ng c√≥ quy·ªÅn x√≥a l·ªãch thi n√†y"}), 403

    exams = [e for e in exams if e.get("id") != exam_id]
    save_exams(exams)
    return jsonify({"success": True})

# ---- Route x·ª≠ l√Ω ·∫£nh v√† append v√†o JSON ----
@app.route('/process_exam_image', methods=['POST'])
def process_exam_image_route():
    if 'file' not in request.files:
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y file ·∫£nh"}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "File kh√¥ng h·ª£p l·ªá"}), 400

    # ∆Øu ti√™n l·∫•y username t·ª´ session
    username = session.get('username')
    
    # N·∫øu session kh√¥ng c√≥, ki·ªÉm tra trong form data
    if not username:
        username = request.form.get('username')

    # N·∫øu v·∫´n kh√¥ng c√≥ username, tr·∫£ v·ªÅ l·ªói
    if not username:
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i"}), 401

    # G·ªçi AI ƒë·ªÉ ph√¢n t√≠ch ·∫£nh l·ªãch thi
    exam_data = ai_generate_exam_schedule(file)

    if exam_data:
        exams = load_exams()
        max_id = max([e.get("id", 0) for e in exams], default=0)
        for item in exam_data.get("exams", []):
            max_id += 1
            item["id"] = max_id
            item["status"] = "ch∆∞a"
            # G√°n username ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
            item["username"] = username
            
        exams.extend(exam_data.get("exams", []))
        save_exams(exams)
        return jsonify(exam_data)
    else:
        return jsonify({"error": "Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i"}), 500

def ai_generate_exam_schedule(image_file):
    """
    G·ª≠i ·∫£nh l·ªãch thi ƒë·∫øn Gemini ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin.
    """
    try:
        img = Image.open(io.BytesIO(image_file.read()))
        
        prompt = """
        Ph√¢n t√≠ch h√¨nh ·∫£nh l·ªãch thi n√†y v√† tr√≠ch xu·∫•t th√¥ng tin sau cho t·ª´ng m√¥n thi:
        1. T√™n m√¥n h·ªçc.
        2. Ng√†y thi (dd/mm/yyyy).
        3. Gi·ªù thi (v√≠ d·ª•: 7:30).
        4. Ph√≤ng thi.
        5. S·ªë t√≠n ch·ªâ c·ªßa m√¥n h·ªçc (n·∫øu c√≥).

        Quy t·∫Øc tr√≠ch xu·∫•t v√† k·∫ø th·ª´a th√¥ng tin:
        - N·∫øu trong b·∫£ng, m·ªôt c·ª•m nhi·ªÅu m√¥n h·ªçc n·∫±m li·ªÅn k·ªÅ theo h√†ng, nh∆∞ng ng√†y/gi·ªù/ph√≤ng ch·ªâ ghi ·ªü **h√†ng ƒë·∫ßu ti√™n**, th√¨ c√°c m√¥n ph√≠a d∆∞·ªõi **ph·∫£i k·∫ø th·ª´a** ƒë·∫ßy ƒë·ªß ng√†y, gi·ªù, ph√≤ng t·ª´ h√†ng ƒë·∫ßu ti√™n c·ªßa c·ª•m ƒë√≥.
        - **TUY·ªÜT ƒê·ªêI KH√îNG** ƒë·ªÉ tr·ªëng ho·∫∑c ƒëi·ªÅn null.
        - **CH·ªà** ƒëi·ªÅn "N/A" cho m·ªôt tr∆∞·ªùng th√¥ng tin khi v√† ch·ªâ khi n√≥ kh√¥ng ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p ·ªü b·∫•t k·ª≥ ƒë√¢u, bao g·ªìm c·∫£ c√°c h√†ng ph√≠a tr√™n trong c√πng m·ªôt c·ª•m.
        
        M·ªói m√¥n thi l√† m·ªôt ƒë·ªëi t∆∞·ª£ng JSON ri√™ng, ngay c·∫£ khi chung ng√†y/gi·ªù/ph√≤ng.

        Xu·∫•t k·∫øt qu·∫£ d∆∞·ªõi ƒë·ªãnh d·∫°ng JSON nh∆∞ sau:
        
        {
        "exam_info": "Th√¥ng tin k·ª≥ thi (n·∫øu c√≥, v√≠ d·ª•: k·ª≥ thi h·ªçc k·ª≥ 1, nƒÉm h·ªçc 2025)",
        "exams": [
            {
            "subject": "T√™n m√¥n h·ªçc",
            "date": "Ng√†y thi",
            "time": "Gi·ªù thi",
            "room": "Ph√≤ng thi",
            "credits": "S·ªë t√≠n ch·ªâ"
            }
        ]
        }
        """
        model = genai.GenerativeModel("gemini-1.5-flash")
        response = model.generate_content([prompt, img])
        content = response.text.strip()
        
        match = re.search(r"\{.*\}", content, re.DOTALL)
        if match:
            json_string = match.group(0)
            try:
                exam_data = json.loads(json_string)
                exams = exam_data.get("exams", [])
                
                # Logic x·ª≠ l√Ω h·∫≠u k·ª≥ ƒë·ªÉ k·∫ø th·ª´a d·ªØ li·ªáu
                last_valid_date = None
                last_valid_time = None
                last_valid_room = None
                
                for item in exams:
                    # C·∫≠p nh·∫≠t gi√° tr·ªã h·ª£p l·ªá cu·ªëi c√πng cho c√°c c·ªôt
                    if item.get("date") not in ["N/A", "", None]:
                        last_valid_date = item.get("date")
                    
                    if item.get("time") not in ["N/A", "", None]:
                        last_valid_time = item.get("time")
                    
                    if item.get("room") not in ["N/A", "", None]:
                        last_valid_room = item.get("room")
                
                # Sau khi c√≥ c√°c gi√° tr·ªã h·ª£p l·ªá cu·ªëi c√πng, duy·ªát l·∫°i ƒë·ªÉ ƒëi·ªÅn v√†o c√°c tr∆∞·ªùng b·ªã thi·∫øu
                for item in exams:
                    if item.get("date") in ["N/A", "", None]:
                        item["date"] = last_valid_date if last_valid_date else "N/A"
                    
                    if item.get("time") in ["N/A", "", None]:
                        item["time"] = last_valid_time if last_valid_time else "N/A"
                        
                    if item.get("room") in ["N/A", "", None]:
                        item["room"] = last_valid_room if last_valid_room else "N/A"

                    item.setdefault("credits", "N/A")

                return exam_data

            except json.JSONDecodeError as e:
                print(f"L·ªói JSONDecodeError: {e}")
                print(f"Chu·ªói JSON b·ªã l·ªói: {json_string}")
                return None

    except Exception as e:
        print(f"L·ªói x·ª≠ l√Ω ·∫£nh l·ªãch thi: {e}")
        return None
########
# if __name__ == "__main__":
#      app.run(debug=True) 
if __name__ == "__main__":
   port = int(os.environ.get("PORT", 5000))
   app.run(host="0.0.0.0", port=port)

